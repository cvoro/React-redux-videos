{
  "_args": [
    [
      {
        "raw": "moment-range",
        "scope": null,
        "escapedName": "moment-range",
        "name": "moment-range",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/dev6/Desktop/test-video"
    ]
  ],
  "_from": "moment-range@latest",
  "_id": "moment-range@3.0.3",
  "_inCache": true,
  "_location": "/moment-range",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/moment-range-3.0.3.tgz_1488325820873_0.12435132637619972"
  },
  "_npmUser": {
    "name": "gf3",
    "email": "gianni@runlevel6.org"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "moment-range",
    "scope": null,
    "escapedName": "moment-range",
    "name": "moment-range",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moment-range/-/moment-range-3.0.3.tgz",
  "_shasum": "f7a1567c73228f317469cb33148ea996f79ccb9a",
  "_shrinkwrap": null,
  "_spec": "moment-range",
  "_where": "/home/dev6/Desktop/test-video",
  "author": {
    "name": "Gianni Chiappetta",
    "email": "gianni@runlevel6.org",
    "url": "https://butt.zone"
  },
  "bugs": {
    "url": "https://github.com/gf3/moment-range/issues"
  },
  "contributors": [
    {
      "name": "Adam Biggs",
      "url": "lightmaker.com"
    },
    {
      "name": "Mats Julian Olsen",
      "url": "https://github.com/mewwts"
    },
    {
      "name": "Matt Patterson",
      "email": "matt@reprocessed.org",
      "url": "http://reprocessed.org/"
    },
    {
      "name": "Wilgert Velinga",
      "email": "wilgert@wilgert.nl",
      "url": "http://neocles.io"
    },
    {
      "name": "Tomasz Bak",
      "url": "http://twitter.com/tomaszbak"
    },
    {
      "name": "Stuart Kelly",
      "url": "https://github.com/stuartleigh"
    },
    {
      "name": "Jeremy Forsythe",
      "email": "jdforsythe@gmail.com",
      "url": "https://github.com/jdforsythe"
    },
    {
      "name": "Александр Гренишин",
      "email": "nd0ut.me@gmail.com",
      "url": "https://github.com/nd0ut"
    },
    {
      "name": "@scotthovestadt",
      "url": "https://github.com/scotthovestadt"
    },
    {
      "name": "Thomas van Lankveld",
      "url": "https://github.com/thomasvanlankveld"
    },
    {
      "name": "nebel",
      "email": "nebel@outlook.com",
      "url": "https://github.com/pronebel"
    },
    {
      "name": "Kevin Ross",
      "email": "kevin.ross@alienfast.com",
      "url": "http://www.alienfast.com"
    },
    {
      "name": "Thomas Walpole",
      "email": "twalpole@gmail.com",
      "url": "https://github.com/twalpole"
    },
    {
      "name": "Jonathan Kim",
      "email": "hello@jkimbo.co.uk",
      "url": "jkimbo.co.uk"
    },
    {
      "name": "Tymon Tobolski",
      "email": "i@teamon.eu",
      "url": "http://teamon.eu"
    },
    {
      "name": "Aristide Niyungeko",
      "email": "aristide.niyungeko@gmail.com",
      "url": "https://github.com/aristiden7o"
    },
    {
      "name": "Bradley Ayers",
      "email": "bradley.ayers@gmail.com",
      "url": "https://github.com/bradleyayers"
    },
    {
      "name": "Ross Hadden",
      "email": "ross@hadden.family",
      "url": "http://rosshadden.github.com/resume"
    },
    {
      "name": "Victoria French",
      "email": "victoria.french@cinecove.com",
      "url": "https://github.com/victoriafrench"
    },
    {
      "name": "Jochen Diekenbrock",
      "url": "https://github.com/JochenDiekenbrock"
    }
  ],
  "dependencies": {
    "es6-symbol": "^3.1.0"
  },
  "description": "Fancy date ranges for Moment.js",
  "devDependencies": {
    "babel-core": "^6.18.2",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.8",
    "babel-plugin-transform-flow-strip-types": "^6.18.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-stage-0": "^6.16.0",
    "doctoc": "^1.2.0",
    "eslint": "^3.11.1",
    "eslint-loader": "^1.6.1",
    "expect.js": "^0.3.1",
    "flow-bin": "^0.36.0",
    "karma": "^1.3.0",
    "karma-babel-polyfill": "0.0.5",
    "karma-chrome-launcher": "^2.0.0",
    "karma-expect": "^1.1.3",
    "karma-mocha": "^1.3.0",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.2",
    "mocha": "^2.5.3",
    "moment": "^2.17.1",
    "webpack": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "f7a1567c73228f317469cb33148ea996f79ccb9a",
    "tarball": "https://registry.npmjs.org/moment-range/-/moment-range-3.0.3.tgz"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "dist/",
    "lib/"
  ],
  "gitHead": "c2474be0aa1fb3a46e914778af9788f1c18afe93",
  "homepage": "https://github.com/gf3/moment-range",
  "jsnext:main": "lib/moment-range.js",
  "license": {
    "type": "Public Domain",
    "url": "https://github.com/gf3/moment-range/raw/master/UNLICENSE"
  },
  "main": "./dist/moment-range",
  "maintainers": [
    {
      "name": "adambiggs",
      "email": "email@adambig.gs"
    },
    {
      "name": "gf3",
      "email": "gianni@runlevel6.org"
    }
  ],
  "name": "moment-range",
  "optionalDependencies": {},
  "peerDependencies": {
    "moment": ">= 2"
  },
  "readme": "# moment-range [![CircleCI](https://circleci.com/gh/gf3/moment-range.svg?style=shield)](https://circleci.com/gh/gf3/moment-range)\n\nFancy date ranges for [Moment.js][moment].\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n  - [Node / NPM](#node--npm)\n  - [Browser](#browser)\n- [Examples](#examples)\n  - [Create](#create)\n  - [Attributes](#attributes)\n  - [Querying](#querying)\n    - [Adjacent](#adjacent)\n    - [Center](#center)\n    - [Contains](#contains)\n    - [Within](#within)\n    - [Overlaps](#overlaps)\n    - [Intersect](#intersect)\n  - [Manipulation](#manipulation)\n    - [Add](#add)\n    - [Clone](#clone)\n    - [Subtract](#subtract)\n  - [Iteration](#iteration)\n    - [by](#by)\n    - [byRange](#byrange)\n    - [reverseBy](#reverseby)\n    - [reverseByRange](#reversebyrange)\n  - [Compare](#compare)\n    - [Equality](#equality)\n    - [Difference](#difference)\n  - [Conversion](#conversion)\n    - [`toDate`](#todate)\n    - [`toString`](#tostring)\n    - [`valueOf`](#valueof)\n- [Running Tests](#running-tests)\n- [Contributors](#contributors)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Installation\n\nmoment-range works in both the browser and [node.js][node].\n\n### Node / NPM\n\nInstall via npm:\n\n``` sh\nnpm install --save moment-range\n```\n\n**ES6:**\n\n``` js\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(Moment);\n```\n\n**CommonJS:**\n\n``` js\nconst Moment = require('moment');\nconst MomentRange = require('moment-range');\n\nconst moment = MomentRange.extendMoment(Moment);\n```\n\n### Browser\n\n``` html\n<script src=\"moment.js\"></script>\n<script src=\"moment-range.js\"></script>\n```\n\n``` js\nwindow['moment-range'].extendMoment(moment);\n```\n\nThanks to the fine people at [cdnjs][cdnjs], you can link to moment-range from\nthe [cdnjs servers][cdnjs-moment-range].\n\n\n\n## Examples\n\n### Create\n\nCreate a date range:\n\n``` js\nconst start = new Date(2012, 0, 15);\nconst end   = new Date(2012, 4, 23);\nconst range = moment.range(start, end);\n```\n\nYou can also create a date range with moment objects:\n\n``` js\nconst start = moment('2011-04-15', 'YYYY-MM-DD');\nconst end   = moment('2011-11-27', 'YYYY-MM-DD');\nconst range = moment.range(start, end);\n```\n\nArrays work too:\n\n``` js\nconst dates = [moment('2011-04-15', 'YYYY-MM-DD'), moment('2011-11-27', 'YYYY-MM-DD')];\nconst range = moment.range(dates);\n```\n\nYou can also create a range from an [ISO 8601 time interval][interval] string:\n\n``` js\nconst timeInterval = '2015-01-17T09:50:04+00:00/2015-04-17T08:29:55+00:00';\nconst range = moment.range(timeInterval);\n```\n\nYou can also create a range from the start until the end of a named interval:\n\n``` js\nconst date = moment('2011-04-15', 'YYYY-MM-DD');\nconst range = date.range('month');\n```\n\nYou can also create open-ended ranges which go to the earliest or latest possible date:\n\n``` js\nconst rangeUntil = moment.range(null, '2011-05-05');\nconst rangeFrom = moment.range('2011-03-05', null);\nconst rangeAllTime = moment.range(null, null);\n```\n\n*Note:* Dates and moment objects both use a timestamp of 00:00:000 if none is\nprovided. To ensure your range includes any timestamp for the given end date,\nuse `.setHours(23,59,59,999)` when constructing a Date object, or\n`.endOf('day')` when constructing a moment object.\n\n### Attributes\n\nYou can access the start and end moments of the range easily enough:\n\n``` js\nconst start = new Date(2012, 0, 15);\nconst end   = new Date(2012, 4, 23);\nconst range = moment.range(start, end);\n\nrange.start  // moment\nrange.end  // moment\n```\n\n### Querying\n\n#### Adjacent\n\nCheck if two ranges are touching but not overlapping:\n\n``` js\nconst a = moment('2016-03-15');\nconst b = moment('2016-03-29');\nconst c = moment('2016-03-10');\nconst d = moment('2016-03-15');\n\nconst range1 = moment.range(a, b);\nconst range2 = moment.range(c, d);\n\nrange1.adjacent(range2) // true\n```\n\n#### Center\n\nCalculate the center of a range:\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 3, 5);\nconst dr    = moment.range(start, end);\n\ndr.center(); // 1300622400000\n```\n\n\n#### Contains\n\nCheck to see if your range contains a date/moment:\n\n``` js\nconst start  = new Date(2012, 4, 1);\nconst end    = new Date(2012, 4, 23);\nconst lol    = new Date(2012, 4, 15);\nconst wat    = new Date(2012, 4, 27);\nconst range  = moment.range(start, end);\nconst range2 = moment.range(lol, wat);\n\nrange.contains(lol); // true\nrange.contains(wat); // false\n```\n\nThe `exclusive` options is used to indicate if the end of the range should be\nexcluded when testing for inclusion:\n\n``` js\nrange.contains(end) // true\nrange.contains(end, { exclusive: false }) // true\nrange.contains(end, { exclusive: true }) // false\n```\n\n#### Within\n\nFind out if your moment falls within a date range:\n\n``` js\nconst start = new Date(2012, 4, 1);\nconst end   = new Date(2012, 4, 23);\nconst when  = moment('2012-05-10', 'YYYY-MM-DD');\nconst range = moment.range(start, end);\n\nwhen.within(range); // true\n```\n\n#### Overlaps\n\nDoes it overlap another range?\n\n``` js\nrange.overlaps(range2); // true\n```\n\nInclude adjacent ranges:\n\n``` js\nconst a = moment('2016-03-15');\nconst b = moment('2016-03-20');\nconst c = moment('2016-03-20');\nconst d = moment('2016-03-25');\n\nconst range1 = moment.range(a, b);\nconst range2 = moment.range(c, d);\n\nrange1.overlaps(range2)                      // false\nrange1.overlaps(range2, { adjacent: false }) // false\nrange1.overlaps(range2, { adjacent: true })  // true\n```\n\n#### Intersect\n\nWhat are the intersecting ranges?\n\n``` js\nrange.intersect(range2); // [moment.range(lol, end)]\n```\n\n### Manipulation\n\n#### Add\n\nAdd/combine/merge overlapping ranges.\n\n``` js\nrange.add(range2); // [moment.range(start, wat)]\n\nconst range3 = moment.range(new Date(2012, 3, 1), new Date(2012, 3, 15);\nrange.add(range3); // [null]\n```\n\n#### Clone\n\nDeep clone a range\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 3, 5);\nconst dr    = moment.range(start, end);\n\nconst dr2 = dr.clone();\ndr2.start.add(2, 'days');\n\ndr2.start.toDate() === dr.start.toDate() // false\n```\n\n#### Subtract\n\nSubtracting one range from another.\n\n``` js\nrange.subtract(range2); // [moment.range(start, lol)]\n```\n\n### Iteration\n\nEach of the iteration methods return an [Iterable][iterable], providing\na convenient and performant interface to iterating over your ranges by a given\nperiod.\n\n#### by\n\nIterate over your range by a given period. Any of the units accepted by\n[moment.js' `add` method][add] may be used. E.g.: `'years' | 'quarters'\n| 'months' | 'weeks' | 'days' | 'hours' | 'minutes' | 'seconds'\n| 'milliseconds'`\n\n``` js\nconst range = moment.range('2010-01-01', '2015-01-01');\n\nfor (let month of range.by('month')) {\n  month.format('YYYY-MM-DD');\n}\n\nconst years = Array.from(range.by('year'));\nyears.length == 5 // true\nyears.map(m => m.format('YYYY')) // ['2010', '2011', '2012', '2013', '2014', '2015']\n```\n\nIteration also supports excluding the end value of the range by setting the\n`exclusive` option to `true`.\n\n``` js\nconst start  = new Date(2012, 2, 1);\nconst end    = new Date(2012, 2, 5);\nconst range1 = moment.range(start, end);\n\nconst acc = Array.from(range1.by('day', { exclusive: true }));\n\nacc.length == 4 // true\n```\n\nAdditionally it's possible to iterate by a given step that defaults to `1`:\n\n``` js\nconst start  = new Date(2012, 2, 2);\nconst end    = new Date(2012, 2, 6);\nconst range1 = moment.range(start, end);\n\nlet acc = Array.from(range1.by('day', { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['02', '04', '06']\n\nacc = Array.from(range1.by('day', { exclusive: true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['02', '04']\n```\n\n#### byRange\n\n``` js\nconst start = new Date(2012, 2, 1);\nconst two   = new Date(2012, 2, 2);\nconst end   = new Date(2012, 2, 5);\nconst range1 = moment.range(start, end);\nconst range2 = moment.range(start, two); // One day\n```\n\nIterate by another range:\n\n``` js\nconst acc = Array.from(range1.by(range2));\n\nacc.length == 5 // true\n```\n\nExclude the end value:\n\n``` js\nconst acc = Array.from(range1.by(range2, { exclusive: true }));\n\nacc.length == 4 // true\n```\n\nBy step:\n\n``` js\nlet acc = Array.from(range1.by(range2, { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['01', '03', '05']\n\nacc = Array.from(range1.by(range2, { exlusive, true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['01', '03']\n```\n\n#### reverseBy\n\nIterate over a range in reverse:\n\n``` js\nconst range = moment.range('2012-01-01', '2015-01-01');\nconst acc = Array.from(range.reverseBy('years'));\nacc.map(m => m.format('YYYY')) // ['2015', '2014', '2013', '2012']\n```\n\nExclude the end value:\n\n``` js\nconst range = moment.range('2012-01-01', '2015-01-01');\nconst acc = Array.from(range.reverseBy('years', { exclusive: true }));\nacc.map(m => m.format('YYYY')) // ['2015', '2014', '2013']\n```\n\nBy step:\n\n``` js\nconst start  = new Date(2012, 2, 2);\nconst end    = new Date(2012, 2, 6);\nconst range1 = moment.range(start, end);\n\nlet acc = Array.from(range1.reverseBy('day', { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['06', '04', '02']\n\nacc = Array.from(range1.reverseBy('day', { exclusive: true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['06', '04']\n```\n\n#### reverseByRange\n\n``` js\nconst start = new Date(2012, 2, 1);\nconst two   = new Date(2012, 2, 2);\nconst end   = new Date(2012, 2, 5);\nconst range1 = moment.range(start, end);\nconst range2 = moment.range(start, two); // One day\n```\n\nIterate by another range in reverse:\n\n``` js\nconst acc = Array.from(range1.by(range2));\n\nacc.length == 5 // true\nacc.map(m => m.format('DD')) // ['05', '04', '03', '02', '01']\n```\n\nExclude the end value:\n\n``` js\nconst acc = Array.from(range1.by(range2, { exclusive: true }));\n\nacc.length == 4 // true\nacc.map(m => m.format('DD')) // ['05', '04', '03', '02']\n```\n\nBy step:\n\n``` js\nlet acc = Array.from(range1.reverseByRange(range2, { step: 2 }));\n\nacc.map(m => m.format('DD')) // ['05', '03', '01']\n\nacc = Array.from(range1.reverseByRange(range2, { exlusive, true, step: 2 }));\n\nacc.map(m => m.format('DD')) // ['05', '03']\n```\n\n### Compare\n\nCompare range lengths or add them together with simple math:\n\n``` js\nconst range1 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range2 = moment.range(new Date(1995, 0, 1), new Date(1995, 12, 25));\n\nrange2 > range1 // true\n\nrange1 + range2 // duration of both ranges in milliseconds\n\nMath.abs(range1 - range2); // difference of ranges in milliseconds\n```\n\n#### Equality\n\nCheck if two ranges are the same, i.e. their starts and ends are the same:\n\n``` js\nconst range1 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range2 = moment.range(new Date(2011, 2, 5), new Date(2011, 3, 15));\nconst range3 = moment.range(new Date(2011, 3, 5), new Date(2011, 6, 15));\n\nrange1.isSame(range2); // true\nrange2.isSame(range3); // false\n\nrange1.isEqual(range2); // true\nrange2.isEqual(range3); // false\n```\n\n#### Difference\n\nThe difference of the entire range given various units.\n\nAny of the units accepted by [moment.js' `add` method][add] may be used.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst dr    = moment.range(start, end);\n\ndr.diff('months'); // 3\ndr.diff('days');   // 92\ndr.diff();         // 7945200000\n```\n\nOptionally you may specify if the difference should be rounded, by default it\nmimics moment-js' behaviour and rounds the values:\n\n``` js\nconst d1 = new Date(Date.UTC(2011, 4, 1));\nconst d2 = new Date(Date.UTC(2011, 4, 5, 12));\nconst range = moment.range(d1, d2);\n\ndr.diff('days')        // 4\ndr.diff('days', false) // 4\ndr.diff('days', true)  // 4.5\n```\n\n`#duration` is an alias for `#diff` and they may be used interchangeably.\n\n### Conversion\n\n#### `toDate`\n\nConverts the `DateRange` to an `Array` of the start and end `Date` objects.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst dr    = moment.range(start, end);\n\ndr.toDate(); // [new Date(2011, 2, 5), new Date(2011, 5, 5)]\n```\n\n#### `toString`\n\nConverting a `DateRange` to a `String` will format it as an [ISO 8601 time\ninterval][interval]:\n\n``` js\nconst start = '2015-01-17T09:50:04+00:00';\nconst end   = '2015-04-17T08:29:55+00:00';\nconst range = moment.range(moment.utc(start), moment.utc(end));\n\nrange.toString() // '2015-01-17T09:50:04+00:00/2015-04-17T08:29:55+00:00'\n```\n\n#### `valueOf`\n\nThe difference between the end date and start date in milliseconds.\n\n``` js\nconst start = new Date(2011, 2, 5);\nconst end   = new Date(2011, 5, 5);\nconst range = moment.range(start, end);\n\nrange.valueOf(); // 7945200000\n```\n\n## Running Tests\n\nClone this bad boy:\n\n``` sh\ngit clone https://git@github.com/gf3/moment-range.git\n```\n\nInstall the dependencies:\n\n``` sh\nnpm install\n```\n\nDo all the things!\n\n``` sh\nnpm run test\nnpm run lint\n```\n\n## Contributors\n\n- [**Adam Biggs**](https://github.com/adambiggs) (http://lightmaker.com)\n- [**Mats Julian Olsen**](https://github.com/mewwts)\n- [**Matt Patterson**](https://github.com/fidothe) (http://reprocessed.org/)\n- [**Wilgert Velinga**](https://github.com/wilgert) (http://neocles.io)\n- [**Tomasz Bak**](https://github.com/tb) (http://twitter.com/tomaszbak)\n- [**Stuart Kelly**](https://github.com/stuartleigh)\n- [**Jeremy Forsythe**](https://github.com/jdforsythe)\n- [**Александр Гренишин**](https://github.com/nd0ut)\n- [**@scotthovestadt**](https://github.com/scotthovestadt)\n- [**Thomas van Lankveld**](https://github.com/thomasvanlankveld)\n- [**nebel**](https://github.com/pronebel)\n- [**Kevin Ross**](https://github.com/rosskevin) (http://www.alienfast.com)\n- [**Thomas Walpole**](https://github.com/twalpole)\n- [**Jonathan Kim**](https://github.com/jkimbo) (http://jkimbo.co.uk)\n- [**Tymon Tobolski**](https://github.com/teamon) (http://teamon.eu)\n- [**Aristide Niyungeko**](https://github.com/aristiden7o)\n- [**Bradley Ayers**](https://github.com/bradleyayers)\n- [**Ross Hadden**](https://github.com/rosshadden) (http://rosshadden.github.com/resume)\n- [**Victoria French**](https://github.com/victoriafrench)\n- [**Jochen Diekenbrock**](https://github.com/JochenDiekenbrock)\n\n\n## License\n\nmoment-range is [UNLICENSED][unlicense].\n\n[add]: http://momentjs.com/docs/#/manipulating/add/\n[cdnjs]: https://github.com/cdnjs/cdnjs\n[cdnjs-moment-range]: https://cdnjs.com/libraries/moment-range\n[interval]: http://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n[iterable]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#Syntaxes_expecting_iterables\n[moment]: http://momentjs.com/\n[node]: http://nodejs.org/\n[unlicense]: http://unlicense.org/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://git@github.com/gf3/moment-range.git"
  },
  "scripts": {
    "build": "webpack",
    "doctoc": "doctoc README.md --github",
    "flow": "flow",
    "lint": "eslint ./lib/",
    "prepublish": "npm run build; cp ./declarations/moment-range.js.flow ./dist",
    "preversion": "npm run flow && npm run lint && npm run test",
    "test": "karma start ./karma.conf.js",
    "version": "npm run build; cp ./declarations/moment-range.js.flow ./dist"
  },
  "version": "3.0.3"
}
