{
  "_args": [
    [
      {
        "raw": "calendar-base@^0.2.1",
        "scope": null,
        "escapedName": "calendar-base",
        "name": "calendar-base",
        "rawSpec": "^0.2.1",
        "spec": ">=0.2.1 <0.3.0",
        "type": "range"
      },
      "/home/dev6/Desktop/test-video/node_modules/react-event-calendar"
    ]
  ],
  "_from": "calendar-base@>=0.2.1 <0.3.0",
  "_id": "calendar-base@0.2.1",
  "_inCache": true,
  "_location": "/calendar-base",
  "_nodeVersion": "5.3.0",
  "_npmUser": {
    "name": "wesleydesouza",
    "email": "npm@wesley.so"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "calendar-base@^0.2.1",
    "scope": null,
    "escapedName": "calendar-base",
    "name": "calendar-base",
    "rawSpec": "^0.2.1",
    "spec": ">=0.2.1 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-event-calendar"
  ],
  "_resolved": "https://registry.npmjs.org/calendar-base/-/calendar-base-0.2.1.tgz",
  "_shasum": "cecefc827901aca2082f847db8cd2f1c26bf1596",
  "_shrinkwrap": null,
  "_spec": "calendar-base@^0.2.1",
  "_where": "/home/dev6/Desktop/test-video/node_modules/react-event-calendar",
  "author": {
    "name": "Wesley de Souza",
    "email": "npm@wesley.so"
  },
  "bugs": {
    "url": "https://github.com/WesleydeSouza/calendar-base/issues"
  },
  "dependencies": {},
  "description": "Base methods for generating calendars using JavaScript.",
  "devDependencies": {
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.16",
    "umd": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "cecefc827901aca2082f847db8cd2f1c26bf1596",
    "tarball": "https://registry.npmjs.org/calendar-base/-/calendar-base-0.2.1.tgz"
  },
  "gitHead": "aa045becbb0cb50650270a9a460eeb16b4ed116b",
  "homepage": "https://github.com/WesleydeSouza/calendar-base#readme",
  "keywords": [
    "calendar",
    "generation",
    "base",
    "core"
  ],
  "license": "MIT",
  "main": "lib/calendar-base.js",
  "maintainers": [
    {
      "name": "wesleydesouza",
      "email": "npm@wex.vc"
    }
  ],
  "name": "calendar-base",
  "optionalDependencies": {},
  "readme": "# Calendar Base [![Build Status](https://travis-ci.org/WesleydeSouza/calendar-base.svg?branch=master)](https://travis-ci.org/WesleydeSouza/calendar-base)\n\nBase methods for generating calendars using JavaScript.\n\nSupports IE 6+, Chrome 1+, Firefox 3+, Safari 4+.\n\n\n## Installation\n\n```bash\nnpm install calendar-base\n```\n\nOr manually copy `dist/calendar-base.min.js` to your project.\n\n\n## Usage\n```js\nvar Calendar = require('calendar-base').Calendar,\n    cal = new Calendar();\n\ncal.getCalendar(2015, 0);\n// Returns an Array with the calendar for January 2015.\n```\n\nUsage with AMD and global variables is available through `dist/calendar-base.min.js`.\n\n[Check an online example](https://tonicdev.com/npm/calendar-base) or browse the `examples` folder for some simple use cases.\n\n\n### Date object notation\n\nEvery returned day or date argument follows this notation:\n```js\n{\n    day: 14,\n    month: 9,\n    year: 1986,\n    weekDay: 4,\n    selected: false,\n    siblingMonth: false,\n    weekNumber: 42\n}\n```\n\nProperties `month` and `weekDay` respect JavaScript’s [`Date.prototype`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype).\n\nOnly `day`, `month`, and `year` are necessary as input parameters for methods that require a date.\n\n\n#### `Calendar(options)`\n\nConstructor for a new calendar generator.\n\nThe object `options` may have the following properties:\n\n* `startDate`: current selected starting date (default `undefined`)\n* `endDate`: current selected ending date (default `undefined`)\n* `siblingMonths`: whether to include the previous and next months’ days before and after the current month when generating a calendar (default `false`)\n* `weekNumbers`: whether to include the week number on each day\n* `weekStart`: day of the week, respects [`Date.prototype.getDay`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay) (default `0`, Sunday)\n\n\n#### `Calendar.diff(dateOne, dateTwo)`\n\nReturns the difference in days between `dateOne` and `dateTwo` as a `Number`.\n\n```js\n> Calendar.diff({ year: 2010, month: 0, day: 1 }, { year: 2010, month: 0, day: 10 });\n-9\n```\n\n\n#### `Calendar.interval(dateOne, dateTwo)`\n\nReturns the amount of days between `dateOne` and `dateTwo` as a `Number`.\n\n```js\n> Calendar.interval({ year: 2010, month: 0, day: 1 }, { year: 2010, month: 0, day: 10 });\n10\n```\n\n\n#### `Calendar.daysInMonth(year, month)`\n\nReturns the amount of days in the given month as a `Number`.\n\n```js\n> Calendar.daysInMonth(2010, 0);\n31\n```\n\n\n#### `Calendar.isLeapYear(year)`\n\nReturns whether the given year is a leap year, as a `Boolean`.\n\n```js\n> Calendar.isLeapYear(2100);\nfalse\n```\n\n\n#### `Calendar.calculateWeekNumber(date)`\n\nReturns the week number for the specified date.\n\n```js\n> Calendar.calculateWeekNumber({year: 1986, month: 9, day: 14 });\n42\n```\n\n\n#### `Calendar.prototype.getCalendar(year, month)`\n\nReturns an `Array` of dates with the days from the given month, always starting at the configured week day.\n\nIf sibling months is disabled, paddings are added as `false` to align the week days, otherwise the respective days from the previous or next months are included.\n\n```js\n> var cal = new Calendar({ siblingMonths: true });\n> cal.getCalendar(2015, 5);\n[ { day: 31, weekDay: 0, month: 4, year: 2015, siblingMonth: true },\n  { day: 1, weekDay: 1, month: 5, year: 2015 },\n  { day: 2, weekDay: 2, month: 5, year: 2015 },\n  ...\n  { day: 4, weekDay: 6, month: 6, year: 2015, siblingMonth: true } ]\n```\n\n\n#### `Calendar.prototype.setDate(date)`\n\nAlias to `Calendar.prototype.setStartDate`.\n\n\n#### `Calendar.prototype.setStartDate(date)`\n\nSets the current selected starting date.\n\n```js\n> cal.setStartDate({ year: 2015, month: 0, day: 1 });\n```\n\n\n#### `Calendar.prototype.setEndDate(date)`\n\nSets the current selected ending date.\n\n```js\n> cal.setEndDate({ year: 2015, month: 0, day: 31 });\n```\n\n\n#### `Calendar.prototype.isDateSelected(date)`\n\nChecks wheter the given date is inside the selected dates interval, returns a `Boolean`.\n\n```js\n> cal.isDateSelected({ year: 2015, month: 0, day: 10 });\ntrue\n```\n\n\n## Important note on week numbers\n\nWeek numbers are calculated based on the ISO 8601 standard, which assumes calculations based on weeks starting on Mondays. Be extra careful displaying the week number if your calendar doesn't start on a Monday.\n\n\n## License\n\nMIT, http://wesleydesouza.mit-license.org/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/WesleydeSouza/calendar-base.git"
  },
  "scripts": {
    "build": "cat lib/calendar-base.js | umd calendar-base --commonJS | uglifyjs > dist/calendar-base.min.js",
    "test": "mocha --reporter spec test/index.js"
  },
  "tonicExampleFilename": "examples/node-js/simple-calendar.js",
  "version": "0.2.1"
}
